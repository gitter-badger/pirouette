#!/usr/bin/env node

var args = process.argv;

// slice off the right number of arguments
args = args.slice(typeof __ejs !== 'undefined' ? 1 : 2);

var toolname = "pirouette";

var createCommand = require("./commands/create"),
    buildCommand  = require("./commands/build"),
    simCommand    = require("./commands/sim"),
    devCommand    = require("./commands/dev"),
    cleanCommand  = require("./commands/clean"),
    compileCommand  = require("./commands/compile");


var commands = Object.create (null, {
    help: { enumerable: true, value: {
	usage: function(s) { return s + " <Command>"; },
	usageString: function(s) { return ": gives more detailed help for <Command>, or this output if no command is given."; },
	run: function(args) {
	    if (args.length === 0) {
		return usage();
	    }
	    throw "help command not implemented";
	}
    }},

    create: { enumerable: true, value: {
	usage: function(s) { return s + " <options> <ProjectName>"; },
	usageString: function(nl_and_indent) {
	    return              ": generates initial project template named <ProjectName> in current directory." +
		nl_and_indent("    where <options> may contain:") +
		nl_and_indent("        -ios: an iOS project") + 
		nl_and_indent("        -osx: an OSX project [default]");
	},

	run: function(args) {
	    createCommand.run(args);
	}
    }},

    build: { enumerable: true, value: {
	usage: function(s) { return s; },
	usageString: function(s) { return ": Builds the current project."; },
	run: function(args) {
	    buildCommand.run(args);
	}
    }},

    clean: { enumerable: true, value: {
	usage: function(s) { return s; },
	usageString: function(s) { return ": Cleans the current project."; },
	run: function(args) {
	    cleanCommand.run(args);
	}
    }},

    sim: { enumerable: true, value: {
	usage: function(s) { return s; },
	usageString: function(s) { return ": deploy the current project to the simulator (only available for ios projects)."; },
	run: function(args) {
	    buildCommand.run([]); // the default build behavior is to build if necessary
	    simCommand.run(args);
	}
    }},

    dev: { enumerable: true, value: {
	usage: function(s) { return s; },
	usageString: function(s) { return ": deploy the current project to the device (only available for ios projects)."; },
	run: function(args) {
	    buildCommand.run([]); // the default build behavior is to build if necessary
	    devCommand.run(args);
	}
    }},

    compile: { enumerable: true, value: {
	usage: function(s) { return s; },
	usageString: function(s) { return ": deploy the current project to the device (only available for ios projects)."; },
	run: function(args) {
	    compileCommand.run(args);
	}
    }}
});
	    

function usage() {
    var justify_col = 40;

    function justify(str) {
	var justify_str = new Array(50).join(" ");
	return str + justify_str.substring(0, justify_col - str.length);
    }

    console.log (" $ " + toolname + " [options] <command>");
    console.log ("where <command> is one of the following:");
    for (var cmdname in commands) {
	var cmd = commands[cmdname];
	console.log ("  " + justify(cmd.usage(cmdname)) + cmd.usageString(function(str) { return "\n" + justify("") + str; }));
    }
}

if (args.length === 0) {
    usage();
    process.exit(0);
}

var cmd = commands[args[0]];

if (cmd) {
    try {
	cmd.run (args.slice(1));
    }
    catch (e) {
	console.log (toolname + ": command `" + args[0] + "' failed:");
	console.log (e);
    }
}
else {
    console.log(toolname + ": Unknown command `" + args[0] + "'");
}

// Local Variables:
// mode: javascript
// End:

